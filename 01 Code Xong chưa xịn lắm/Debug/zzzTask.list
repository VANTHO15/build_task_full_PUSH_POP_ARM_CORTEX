
zzzTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000105c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08001204  08001204  00011204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012d0  080012d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080012d0  080012d0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012d0  080012d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012d0  080012d0  000112d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012d4  080012d4  000112d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080012d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000044  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d21  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004c8  00000000  00000000  00020dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  00021288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000180  00000000  00000000  00021450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cd8  00000000  00000000  000215d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a2b  00000000  00000000  000242a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000096e1  00000000  00000000  00025cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002f3b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c70  00000000  00000000  0002f404  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000074 	.word	0x20000074
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080011ec 	.word	0x080011ec

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000078 	.word	0x20000078
 80001e4:	080011ec 	.word	0x080011ec

080001e8 <delay>:
#include "led.h"



void delay(uint32_t count)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 80001f0:	2300      	movs	r3, #0
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e002      	b.n	80001fc <delay+0x14>
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	3301      	adds	r3, #1
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fa      	ldr	r2, [r7, #12]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	429a      	cmp	r2, r3
 8000202:	d3f8      	bcc.n	80001f6 <delay+0xe>
}
 8000204:	bf00      	nop
 8000206:	bf00      	nop
 8000208:	3714      	adds	r7, #20
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <led_init_all>:

void led_init_all(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 8000216:	4b19      	ldr	r3, [pc, #100]	; (800027c <led_init_all+0x6c>)
 8000218:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 800021a:	4b19      	ldr	r3, [pc, #100]	; (8000280 <led_init_all+0x70>)
 800021c:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f043 0208 	orr.w	r2, r3, #8
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	601a      	str	r2, [r3, #0]


    led_off(LED_GREEN);
 800025a:	200c      	movs	r0, #12
 800025c:	f000 f82a 	bl	80002b4 <led_off>
    led_off(LED_ORANGE);
 8000260:	200d      	movs	r0, #13
 8000262:	f000 f827 	bl	80002b4 <led_off>
    led_off(LED_RED);
 8000266:	200e      	movs	r0, #14
 8000268:	f000 f824 	bl	80002b4 <led_off>
    led_off(LED_BLUE);
 800026c:	200f      	movs	r0, #15
 800026e:	f000 f821 	bl	80002b4 <led_off>



}
 8000272:	bf00      	nop
 8000274:	3708      	adds	r7, #8
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	40023830 	.word	0x40023830
 8000280:	40020c00 	.word	0x40020c00

08000284 <led_on>:

void led_on(uint8_t led_no)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <led_on+0x2c>)
 8000290:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	79fa      	ldrb	r2, [r7, #7]
 8000298:	2101      	movs	r1, #1
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	431a      	orrs	r2, r3
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	601a      	str	r2, [r3, #0]

}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40020c14 	.word	0x40020c14

080002b4 <led_off>:

void led_off(uint8_t led_no)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <led_off+0x2c>)
 80002c0:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	79fa      	ldrb	r2, [r7, #7]
 80002c8:	2101      	movs	r1, #1
 80002ca:	fa01 f202 	lsl.w	r2, r1, r2
 80002ce:	43d2      	mvns	r2, r2
 80002d0:	401a      	ands	r2, r3
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	601a      	str	r2, [r3, #0]

}
 80002d6:	bf00      	nop
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	40020c14 	.word	0x40020c14

080002e4 <main>:
uint32_t task_handlers[MAX_STACKS];

uint8_t curent_task = 0 ; // task 1 đang chạy

int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	enable_rpocessor_faults();
 80002e8:	f000 f8fc 	bl	80004e4 <enable_rpocessor_faults>
	init_scheduler_stack(SCHED_STACK_START);
 80002ec:	480d      	ldr	r0, [pc, #52]	; (8000324 <main+0x40>)
 80002ee:	f000 f8ad 	bl	800044c <init_scheduler_stack>

	task_handlers[0]= (uint32_t)task1_handler;
 80002f2:	4a0d      	ldr	r2, [pc, #52]	; (8000328 <main+0x44>)
 80002f4:	4b0d      	ldr	r3, [pc, #52]	; (800032c <main+0x48>)
 80002f6:	601a      	str	r2, [r3, #0]
	task_handlers[1]= (uint32_t)task2_handler;
 80002f8:	4a0d      	ldr	r2, [pc, #52]	; (8000330 <main+0x4c>)
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <main+0x48>)
 80002fc:	605a      	str	r2, [r3, #4]
	task_handlers[2]= (uint32_t)task3_handler;
 80002fe:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <main+0x50>)
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <main+0x48>)
 8000302:	609a      	str	r2, [r3, #8]
	task_handlers[3]= (uint32_t)task4_handler;
 8000304:	4a0c      	ldr	r2, [pc, #48]	; (8000338 <main+0x54>)
 8000306:	4b09      	ldr	r3, [pc, #36]	; (800032c <main+0x48>)
 8000308:	60da      	str	r2, [r3, #12]

	led_init_all();
 800030a:	f7ff ff81 	bl	8000210 <led_init_all>

	init_tasks_stack();
 800030e:	f000 f8a3 	bl	8000458 <init_tasks_stack>

	init_systick_timer(TICK_HZ);
 8000312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000316:	f000 f869 	bl	80003ec <init_systick_timer>

	// đang dung MSP nên chuyển qua PSP
	switch_sp_to_psp();
 800031a:	f000 f953 	bl	80005c4 <switch_sp_to_psp>

	task1_handler();
 800031e:	f000 f80d 	bl	800033c <task1_handler>


    /* Loop forever */
	for(;;);
 8000322:	e7fe      	b.n	8000322 <main+0x3e>
 8000324:	2001f000 	.word	0x2001f000
 8000328:	0800033d 	.word	0x0800033d
 800032c:	20000090 	.word	0x20000090
 8000330:	08000369 	.word	0x08000369
 8000334:	08000395 	.word	0x08000395
 8000338:	080003c1 	.word	0x080003c1

0800033c <task1_handler>:
}

void task1_handler(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task  1\n");
 8000340:	4807      	ldr	r0, [pc, #28]	; (8000360 <task1_handler+0x24>)
 8000342:	f000 fac9 	bl	80008d8 <puts>
		led_on(12);
 8000346:	200c      	movs	r0, #12
 8000348:	f7ff ff9c 	bl	8000284 <led_on>
		delay(DELAY_COUNT_1S);
 800034c:	4805      	ldr	r0, [pc, #20]	; (8000364 <task1_handler+0x28>)
 800034e:	f7ff ff4b 	bl	80001e8 <delay>
		led_off(12);
 8000352:	200c      	movs	r0, #12
 8000354:	f7ff ffae 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_1S);
 8000358:	4802      	ldr	r0, [pc, #8]	; (8000364 <task1_handler+0x28>)
 800035a:	f7ff ff45 	bl	80001e8 <delay>
		printf("Task  1\n");
 800035e:	e7ef      	b.n	8000340 <task1_handler+0x4>
 8000360:	08001204 	.word	0x08001204
 8000364:	001312d0 	.word	0x001312d0

08000368 <task2_handler>:

	}
}
void task2_handler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task  2\n");
 800036c:	4807      	ldr	r0, [pc, #28]	; (800038c <task2_handler+0x24>)
 800036e:	f000 fab3 	bl	80008d8 <puts>
		led_on(13);
 8000372:	200d      	movs	r0, #13
 8000374:	f7ff ff86 	bl	8000284 <led_on>
		delay(DELAY_COUNT_500MS);
 8000378:	4805      	ldr	r0, [pc, #20]	; (8000390 <task2_handler+0x28>)
 800037a:	f7ff ff35 	bl	80001e8 <delay>
		led_off(13);
 800037e:	200d      	movs	r0, #13
 8000380:	f7ff ff98 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_500MS);
 8000384:	4802      	ldr	r0, [pc, #8]	; (8000390 <task2_handler+0x28>)
 8000386:	f7ff ff2f 	bl	80001e8 <delay>
		printf("Task  2\n");
 800038a:	e7ef      	b.n	800036c <task2_handler+0x4>
 800038c:	0800120c 	.word	0x0800120c
 8000390:	00098968 	.word	0x00098968

08000394 <task3_handler>:

	}
}
void task3_handler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task  3\n");
 8000398:	4807      	ldr	r0, [pc, #28]	; (80003b8 <task3_handler+0x24>)
 800039a:	f000 fa9d 	bl	80008d8 <puts>
		led_on(14);
 800039e:	200e      	movs	r0, #14
 80003a0:	f7ff ff70 	bl	8000284 <led_on>
		delay(DELAY_COUNT_250MS);
 80003a4:	4805      	ldr	r0, [pc, #20]	; (80003bc <task3_handler+0x28>)
 80003a6:	f7ff ff1f 	bl	80001e8 <delay>
		led_off(14);
 80003aa:	200e      	movs	r0, #14
 80003ac:	f7ff ff82 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_250MS);
 80003b0:	4802      	ldr	r0, [pc, #8]	; (80003bc <task3_handler+0x28>)
 80003b2:	f7ff ff19 	bl	80001e8 <delay>
		printf("Task  3\n");
 80003b6:	e7ef      	b.n	8000398 <task3_handler+0x4>
 80003b8:	08001214 	.word	0x08001214
 80003bc:	0004c4b4 	.word	0x0004c4b4

080003c0 <task4_handler>:

	}
}
void task4_handler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Task  4\n");
 80003c4:	4807      	ldr	r0, [pc, #28]	; (80003e4 <task4_handler+0x24>)
 80003c6:	f000 fa87 	bl	80008d8 <puts>
		led_on(15);
 80003ca:	200f      	movs	r0, #15
 80003cc:	f7ff ff5a 	bl	8000284 <led_on>
		delay(DELAY_COUNT_125MS);
 80003d0:	4805      	ldr	r0, [pc, #20]	; (80003e8 <task4_handler+0x28>)
 80003d2:	f7ff ff09 	bl	80001e8 <delay>
		led_off(15);
 80003d6:	200f      	movs	r0, #15
 80003d8:	f7ff ff6c 	bl	80002b4 <led_off>
		delay(DELAY_COUNT_125MS);
 80003dc:	4802      	ldr	r0, [pc, #8]	; (80003e8 <task4_handler+0x28>)
 80003de:	f7ff ff03 	bl	80001e8 <delay>
		printf("Task  4\n");
 80003e2:	e7ef      	b.n	80003c4 <task4_handler+0x4>
 80003e4:	0800121c 	.word	0x0800121c
 80003e8:	0002625a 	.word	0x0002625a

080003ec <init_systick_timer>:

	}
}

void init_systick_timer(uint32_t tick_hz)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b087      	sub	sp, #28
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t *)0xE000E014;
 80003f4:	4b13      	ldr	r3, [pc, #76]	; (8000444 <init_systick_timer+0x58>)
 80003f6:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t *)0xE000E010;
 80003f8:	4b13      	ldr	r3, [pc, #76]	; (8000448 <init_systick_timer+0x5c>)
 80003fa:	613b      	str	r3, [r7, #16]

	// reload value
	uint32_t count_value = (SYSTICK_TIM_CLK / TICK_HZ) -1 ;
 80003fc:	f643 637f 	movw	r3, #15999	; 0x3e7f
 8000400:	60fb      	str	r3, [r7, #12]

	// xóa SVR 24 bit
	*pSRVR &=~ (0x00FFFFFFFF);
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]

	// ghi value vào SVR
	*pSRVR |= count_value;
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	431a      	orrs	r2, r3
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	601a      	str	r2, [r3, #0]

	// enable systick exception request
	*pSCSR |= ( 1<< 1);
 8000414:	693b      	ldr	r3, [r7, #16]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f043 0202 	orr.w	r2, r3, #2
 800041c:	693b      	ldr	r3, [r7, #16]
 800041e:	601a      	str	r2, [r3, #0]
	// clock source
	*pSCSR |= ( 1<< 2);
 8000420:	693b      	ldr	r3, [r7, #16]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f043 0204 	orr.w	r2, r3, #4
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	601a      	str	r2, [r3, #0]
	// anable counter
	*pSCSR |= ( 1<< 0);
 800042c:	693b      	ldr	r3, [r7, #16]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f043 0201 	orr.w	r2, r3, #1
 8000434:	693b      	ldr	r3, [r7, #16]
 8000436:	601a      	str	r2, [r3, #0]

}
 8000438:	bf00      	nop
 800043a:	371c      	adds	r7, #28
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	e000e014 	.word	0xe000e014
 8000448:	e000e010 	.word	0xe000e010

0800044c <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 800044c:	4603      	mov	r3, r0
     __asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  :   );
 800044e:	f383 8808 	msr	MSP, r3
     __asm volatile("BX LR"); // sao chép giá trị của LR vào PC
 8000452:	4770      	bx	lr

}
 8000454:	bf00      	nop
	...

08000458 <init_tasks_stack>:

#define DUMMY_XPSR 0x01000000;
void init_tasks_stack(void)
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
	uint32_t * pPSP;
	for(int i = 0;i< MAX_STACKS ;i ++)
 800045e:	2300      	movs	r3, #0
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	e032      	b.n	80004ca <init_tasks_stack+0x72>
	{
		pPSP = (uint32_t*)psp_of_stacks[i];
 8000464:	4a1d      	ldr	r2, [pc, #116]	; (80004dc <init_tasks_stack+0x84>)
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800046c:	60fb      	str	r3, [r7, #12]

		pPSP--; // XPSR
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	3b04      	subs	r3, #4
 8000472:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800047a:	601a      	str	r2, [r3, #0]

		pPSP--; // PC
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3b04      	subs	r3, #4
 8000480:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 8000482:	4a17      	ldr	r2, [pc, #92]	; (80004e0 <init_tasks_stack+0x88>)
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	601a      	str	r2, [r3, #0]

		pPSP--; // LR
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	3b04      	subs	r3, #4
 8000492:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	f06f 0202 	mvn.w	r2, #2
 800049a:	601a      	str	r2, [r3, #0]
		for( int j =0;j< 13; j++)
 800049c:	2300      	movs	r3, #0
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	e008      	b.n	80004b4 <init_tasks_stack+0x5c>
		{

			pPSP--;
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	3b04      	subs	r3, #4
 80004a6:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
		for( int j =0;j< 13; j++)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	3301      	adds	r3, #1
 80004b2:	607b      	str	r3, [r7, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2b0c      	cmp	r3, #12
 80004b8:	ddf3      	ble.n	80004a2 <init_tasks_stack+0x4a>

		}

		// sau khi xong thì lưu lại sPSP
		psp_of_stacks[i] = (uint32_t)pPSP;
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	4907      	ldr	r1, [pc, #28]	; (80004dc <init_tasks_stack+0x84>)
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0;i< MAX_STACKS ;i ++)
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	3301      	adds	r3, #1
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	2b03      	cmp	r3, #3
 80004ce:	ddc9      	ble.n	8000464 <init_tasks_stack+0xc>

	}
}
 80004d0:	bf00      	nop
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	20000000 	.word	0x20000000
 80004e0:	20000090 	.word	0x20000090

080004e4 <enable_rpocessor_faults>:

void enable_rpocessor_faults(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
	// 1 enable all config exception like usage foult, mem manager fault and bus fault
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <enable_rpocessor_faults+0x38>)
 80004ec:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16); //mem manage
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); //bus fault
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); //usage fault
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	601a      	str	r2, [r3, #0]
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	e000ed24 	.word	0xe000ed24

08000520 <HardFault_Handler>:

void HardFault_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 8000524:	4801      	ldr	r0, [pc, #4]	; (800052c <HardFault_Handler+0xc>)
 8000526:	f000 f9d7 	bl	80008d8 <puts>
	while(1);
 800052a:	e7fe      	b.n	800052a <HardFault_Handler+0xa>
 800052c:	08001224 	.word	0x08001224

08000530 <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 8000534:	4801      	ldr	r0, [pc, #4]	; (800053c <MemManage_Handler+0xc>)
 8000536:	f000 f9cf 	bl	80008d8 <puts>
	while(1);
 800053a:	e7fe      	b.n	800053a <MemManage_Handler+0xa>
 800053c:	0800123c 	.word	0x0800123c

08000540 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 8000544:	4801      	ldr	r0, [pc, #4]	; (800054c <BusFault_Handler+0xc>)
 8000546:	f000 f9c7 	bl	80008d8 <puts>
	while(1);
 800054a:	e7fe      	b.n	800054a <BusFault_Handler+0xa>
 800054c:	08001254 	.word	0x08001254

08000550 <get_psp_value>:
}

uint32_t get_psp_value(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

	return psp_of_stacks[curent_task];
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <get_psp_value+0x18>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	461a      	mov	r2, r3
 800055a:	4b04      	ldr	r3, [pc, #16]	; (800056c <get_psp_value+0x1c>)
 800055c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8000560:	4618      	mov	r0, r3
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	200000a0 	.word	0x200000a0
 800056c:	20000000 	.word	0x20000000

08000570 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	psp_of_stacks[curent_task]= current_psp_value;
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <save_psp_value+0x20>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4619      	mov	r1, r3
 800057e:	4a05      	ldr	r2, [pc, #20]	; (8000594 <save_psp_value+0x24>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr
 8000590:	200000a0 	.word	0x200000a0
 8000594:	20000000 	.word	0x20000000

08000598 <update_next_task>:

void update_next_task(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	curent_task ++;
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <update_next_task+0x28>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <update_next_task+0x28>)
 80005a6:	701a      	strb	r2, [r3, #0]
	curent_task = curent_task % MAX_STACKS;
 80005a8:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <update_next_task+0x28>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	f003 0303 	and.w	r3, r3, #3
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <update_next_task+0x28>)
 80005b4:	701a      	strb	r2, [r3, #0]
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	200000a0 	.word	0x200000a0

080005c4 <switch_sp_to_psp>:

__attribute__((naked))  void switch_sp_to_psp(void)
{
	//1. initialize the PSP with TASK1 stack start address
	//get the value of psp of current_task
	__asm volatile ("PUSH {LR}"); //Lưu LR kết nối trở lại main ()
 80005c4:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value"); // Giá trị trả về lưu trong R0
 80005c6:	f7ff ffc3 	bl	8000550 <get_psp_value>
	__asm volatile ("MSR PSP,R0"); //initialize psp
 80005ca:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");  //trả về giá trị LR
 80005ce:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0X02");
 80005d2:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 80005d6:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 80005da:	4770      	bx	lr
}
 80005dc:	bf00      	nop

080005de <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler()
{
	//* lưu trạng thái cho task current
	//1 get giá trị PSP của task đang chạy hiện tại
	__asm volatile("MRS R0, PSP");
 80005de:	f3ef 8009 	mrs	r0, PSP

	//2 sử dụng giá trị PSP lưu SF2 ( R4 - R11)
	__asm volatile ("STMDB R0!, {R4-R11}");
 80005e2:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 80005e6:	b500      	push	{lr}

	//3. lưu giá trị hienj tại của PSP
	__asm volatile ("BL save_psp_value");
 80005e8:	f7ff ffc2 	bl	8000570 <save_psp_value>


	//* truy xuất ngữ cảnh của Task tiếp theo
	//1 quyết định task nào chạy
	__asm volatile("BL update_next_task");
 80005ec:	f7ff ffd4 	bl	8000598 <update_next_task>

	//2. get PSP value
	__asm volatile ("BL get_psp_value");
 80005f0:	f7ff ffae 	bl	8000550 <get_psp_value>

	//3 sử dụng PSP value để truy xuát SF2 (R4 - R11)
	__asm volatile ("LDMIA R0!, {R4-R11}");
 80005f4:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. update PSP và thoát
	__asm volatile ("MSR PSP,R0");
 80005f8:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 80005fc:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 8000600:	4770      	bx	lr
}
 8000602:	bf00      	nop

08000604 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	e00a      	b.n	800062c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000616:	f3af 8000 	nop.w
 800061a:	4601      	mov	r1, r0
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	60ba      	str	r2, [r7, #8]
 8000622:	b2ca      	uxtb	r2, r1
 8000624:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	3301      	adds	r3, #1
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	429a      	cmp	r2, r3
 8000632:	dbf0      	blt.n	8000616 <_read+0x12>
	}

return len;
 8000634:	687b      	ldr	r3, [r7, #4]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b086      	sub	sp, #24
 8000642:	af00      	add	r7, sp, #0
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	e009      	b.n	8000664 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	60ba      	str	r2, [r7, #8]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	3301      	adds	r3, #1
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbf1      	blt.n	8000650 <_write+0x12>
	}
	return len;
 800066c:	687b      	ldr	r3, [r7, #4]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <_close>:

int _close(int file)
{
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
	return -1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800069c:	605a      	str	r2, [r3, #4]
	return 0;
 800069e:	2300      	movs	r3, #0
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bc80      	pop	{r7}
 80006a8:	4770      	bx	lr

080006aa <_isatty>:

int _isatty(int file)
{
 80006aa:	b480      	push	{r7}
 80006ac:	b083      	sub	sp, #12
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	6078      	str	r0, [r7, #4]
	return 1;
 80006b2:	2301      	movs	r3, #1
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	370c      	adds	r7, #12
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006be:	b480      	push	{r7}
 80006c0:	b085      	sub	sp, #20
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	60f8      	str	r0, [r7, #12]
 80006c6:	60b9      	str	r1, [r7, #8]
 80006c8:	607a      	str	r2, [r7, #4]
	return 0;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
	...

080006d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e0:	4a14      	ldr	r2, [pc, #80]	; (8000734 <_sbrk+0x5c>)
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <_sbrk+0x60>)
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <_sbrk+0x64>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d102      	bne.n	80006fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <_sbrk+0x64>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <_sbrk+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	429a      	cmp	r2, r3
 8000706:	d207      	bcs.n	8000718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000708:	f000 f846 	bl	8000798 <__errno>
 800070c:	4603      	mov	r3, r0
 800070e:	220c      	movs	r2, #12
 8000710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	e009      	b.n	800072c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <_sbrk+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800071e:	4b07      	ldr	r3, [pc, #28]	; (800073c <_sbrk+0x64>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	4a05      	ldr	r2, [pc, #20]	; (800073c <_sbrk+0x64>)
 8000728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072a:	68fb      	ldr	r3, [r7, #12]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20020000 	.word	0x20020000
 8000738:	00000400 	.word	0x00000400
 800073c:	200000a4 	.word	0x200000a4
 8000740:	200000b8 	.word	0x200000b8

08000744 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000746:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000748:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <LoopForever+0x6>)
  ldr r1, =_edata
 800074e:	490d      	ldr	r1, [pc, #52]	; (8000784 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000750:	4a0d      	ldr	r2, [pc, #52]	; (8000788 <LoopForever+0xe>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000764:	4c0a      	ldr	r4, [pc, #40]	; (8000790 <LoopForever+0x16>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000772:	f000 f817 	bl	80007a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000776:	f7ff fdb5 	bl	80002e4 <main>

0800077a <LoopForever>:

LoopForever:
    b LoopForever
 800077a:	e7fe      	b.n	800077a <LoopForever>
  ldr   r0, =_estack
 800077c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000784:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000788:	080012d8 	.word	0x080012d8
  ldr r2, =_sbss
 800078c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000790:	200000b8 	.word	0x200000b8

08000794 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC_IRQHandler>
	...

08000798 <__errno>:
 8000798:	4b01      	ldr	r3, [pc, #4]	; (80007a0 <__errno+0x8>)
 800079a:	6818      	ldr	r0, [r3, #0]
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000010 	.word	0x20000010

080007a4 <__libc_init_array>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	4d0d      	ldr	r5, [pc, #52]	; (80007dc <__libc_init_array+0x38>)
 80007a8:	4c0d      	ldr	r4, [pc, #52]	; (80007e0 <__libc_init_array+0x3c>)
 80007aa:	1b64      	subs	r4, r4, r5
 80007ac:	10a4      	asrs	r4, r4, #2
 80007ae:	2600      	movs	r6, #0
 80007b0:	42a6      	cmp	r6, r4
 80007b2:	d109      	bne.n	80007c8 <__libc_init_array+0x24>
 80007b4:	4d0b      	ldr	r5, [pc, #44]	; (80007e4 <__libc_init_array+0x40>)
 80007b6:	4c0c      	ldr	r4, [pc, #48]	; (80007e8 <__libc_init_array+0x44>)
 80007b8:	f000 fd18 	bl	80011ec <_init>
 80007bc:	1b64      	subs	r4, r4, r5
 80007be:	10a4      	asrs	r4, r4, #2
 80007c0:	2600      	movs	r6, #0
 80007c2:	42a6      	cmp	r6, r4
 80007c4:	d105      	bne.n	80007d2 <__libc_init_array+0x2e>
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80007cc:	4798      	blx	r3
 80007ce:	3601      	adds	r6, #1
 80007d0:	e7ee      	b.n	80007b0 <__libc_init_array+0xc>
 80007d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d6:	4798      	blx	r3
 80007d8:	3601      	adds	r6, #1
 80007da:	e7f2      	b.n	80007c2 <__libc_init_array+0x1e>
 80007dc:	080012d0 	.word	0x080012d0
 80007e0:	080012d0 	.word	0x080012d0
 80007e4:	080012d0 	.word	0x080012d0
 80007e8:	080012d4 	.word	0x080012d4

080007ec <memset>:
 80007ec:	4402      	add	r2, r0
 80007ee:	4603      	mov	r3, r0
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d100      	bne.n	80007f6 <memset+0xa>
 80007f4:	4770      	bx	lr
 80007f6:	f803 1b01 	strb.w	r1, [r3], #1
 80007fa:	e7f9      	b.n	80007f0 <memset+0x4>

080007fc <_puts_r>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	460e      	mov	r6, r1
 8000800:	4605      	mov	r5, r0
 8000802:	b118      	cbz	r0, 800080c <_puts_r+0x10>
 8000804:	6983      	ldr	r3, [r0, #24]
 8000806:	b90b      	cbnz	r3, 800080c <_puts_r+0x10>
 8000808:	f000 fa44 	bl	8000c94 <__sinit>
 800080c:	69ab      	ldr	r3, [r5, #24]
 800080e:	68ac      	ldr	r4, [r5, #8]
 8000810:	b913      	cbnz	r3, 8000818 <_puts_r+0x1c>
 8000812:	4628      	mov	r0, r5
 8000814:	f000 fa3e 	bl	8000c94 <__sinit>
 8000818:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <_puts_r+0xd0>)
 800081a:	429c      	cmp	r4, r3
 800081c:	d120      	bne.n	8000860 <_puts_r+0x64>
 800081e:	686c      	ldr	r4, [r5, #4]
 8000820:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000822:	07db      	lsls	r3, r3, #31
 8000824:	d405      	bmi.n	8000832 <_puts_r+0x36>
 8000826:	89a3      	ldrh	r3, [r4, #12]
 8000828:	0598      	lsls	r0, r3, #22
 800082a:	d402      	bmi.n	8000832 <_puts_r+0x36>
 800082c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800082e:	f000 facf 	bl	8000dd0 <__retarget_lock_acquire_recursive>
 8000832:	89a3      	ldrh	r3, [r4, #12]
 8000834:	0719      	lsls	r1, r3, #28
 8000836:	d51d      	bpl.n	8000874 <_puts_r+0x78>
 8000838:	6923      	ldr	r3, [r4, #16]
 800083a:	b1db      	cbz	r3, 8000874 <_puts_r+0x78>
 800083c:	3e01      	subs	r6, #1
 800083e:	68a3      	ldr	r3, [r4, #8]
 8000840:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000844:	3b01      	subs	r3, #1
 8000846:	60a3      	str	r3, [r4, #8]
 8000848:	bb39      	cbnz	r1, 800089a <_puts_r+0x9e>
 800084a:	2b00      	cmp	r3, #0
 800084c:	da38      	bge.n	80008c0 <_puts_r+0xc4>
 800084e:	4622      	mov	r2, r4
 8000850:	210a      	movs	r1, #10
 8000852:	4628      	mov	r0, r5
 8000854:	f000 f848 	bl	80008e8 <__swbuf_r>
 8000858:	3001      	adds	r0, #1
 800085a:	d011      	beq.n	8000880 <_puts_r+0x84>
 800085c:	250a      	movs	r5, #10
 800085e:	e011      	b.n	8000884 <_puts_r+0x88>
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <_puts_r+0xd4>)
 8000862:	429c      	cmp	r4, r3
 8000864:	d101      	bne.n	800086a <_puts_r+0x6e>
 8000866:	68ac      	ldr	r4, [r5, #8]
 8000868:	e7da      	b.n	8000820 <_puts_r+0x24>
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <_puts_r+0xd8>)
 800086c:	429c      	cmp	r4, r3
 800086e:	bf08      	it	eq
 8000870:	68ec      	ldreq	r4, [r5, #12]
 8000872:	e7d5      	b.n	8000820 <_puts_r+0x24>
 8000874:	4621      	mov	r1, r4
 8000876:	4628      	mov	r0, r5
 8000878:	f000 f888 	bl	800098c <__swsetup_r>
 800087c:	2800      	cmp	r0, #0
 800087e:	d0dd      	beq.n	800083c <_puts_r+0x40>
 8000880:	f04f 35ff 	mov.w	r5, #4294967295
 8000884:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000886:	07da      	lsls	r2, r3, #31
 8000888:	d405      	bmi.n	8000896 <_puts_r+0x9a>
 800088a:	89a3      	ldrh	r3, [r4, #12]
 800088c:	059b      	lsls	r3, r3, #22
 800088e:	d402      	bmi.n	8000896 <_puts_r+0x9a>
 8000890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000892:	f000 fa9e 	bl	8000dd2 <__retarget_lock_release_recursive>
 8000896:	4628      	mov	r0, r5
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	2b00      	cmp	r3, #0
 800089c:	da04      	bge.n	80008a8 <_puts_r+0xac>
 800089e:	69a2      	ldr	r2, [r4, #24]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	dc06      	bgt.n	80008b2 <_puts_r+0xb6>
 80008a4:	290a      	cmp	r1, #10
 80008a6:	d004      	beq.n	80008b2 <_puts_r+0xb6>
 80008a8:	6823      	ldr	r3, [r4, #0]
 80008aa:	1c5a      	adds	r2, r3, #1
 80008ac:	6022      	str	r2, [r4, #0]
 80008ae:	7019      	strb	r1, [r3, #0]
 80008b0:	e7c5      	b.n	800083e <_puts_r+0x42>
 80008b2:	4622      	mov	r2, r4
 80008b4:	4628      	mov	r0, r5
 80008b6:	f000 f817 	bl	80008e8 <__swbuf_r>
 80008ba:	3001      	adds	r0, #1
 80008bc:	d1bf      	bne.n	800083e <_puts_r+0x42>
 80008be:	e7df      	b.n	8000880 <_puts_r+0x84>
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	250a      	movs	r5, #10
 80008c4:	1c5a      	adds	r2, r3, #1
 80008c6:	6022      	str	r2, [r4, #0]
 80008c8:	701d      	strb	r5, [r3, #0]
 80008ca:	e7db      	b.n	8000884 <_puts_r+0x88>
 80008cc:	08001290 	.word	0x08001290
 80008d0:	080012b0 	.word	0x080012b0
 80008d4:	08001270 	.word	0x08001270

080008d8 <puts>:
 80008d8:	4b02      	ldr	r3, [pc, #8]	; (80008e4 <puts+0xc>)
 80008da:	4601      	mov	r1, r0
 80008dc:	6818      	ldr	r0, [r3, #0]
 80008de:	f7ff bf8d 	b.w	80007fc <_puts_r>
 80008e2:	bf00      	nop
 80008e4:	20000010 	.word	0x20000010

080008e8 <__swbuf_r>:
 80008e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ea:	460e      	mov	r6, r1
 80008ec:	4614      	mov	r4, r2
 80008ee:	4605      	mov	r5, r0
 80008f0:	b118      	cbz	r0, 80008fa <__swbuf_r+0x12>
 80008f2:	6983      	ldr	r3, [r0, #24]
 80008f4:	b90b      	cbnz	r3, 80008fa <__swbuf_r+0x12>
 80008f6:	f000 f9cd 	bl	8000c94 <__sinit>
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <__swbuf_r+0x98>)
 80008fc:	429c      	cmp	r4, r3
 80008fe:	d12b      	bne.n	8000958 <__swbuf_r+0x70>
 8000900:	686c      	ldr	r4, [r5, #4]
 8000902:	69a3      	ldr	r3, [r4, #24]
 8000904:	60a3      	str	r3, [r4, #8]
 8000906:	89a3      	ldrh	r3, [r4, #12]
 8000908:	071a      	lsls	r2, r3, #28
 800090a:	d52f      	bpl.n	800096c <__swbuf_r+0x84>
 800090c:	6923      	ldr	r3, [r4, #16]
 800090e:	b36b      	cbz	r3, 800096c <__swbuf_r+0x84>
 8000910:	6923      	ldr	r3, [r4, #16]
 8000912:	6820      	ldr	r0, [r4, #0]
 8000914:	1ac0      	subs	r0, r0, r3
 8000916:	6963      	ldr	r3, [r4, #20]
 8000918:	b2f6      	uxtb	r6, r6
 800091a:	4283      	cmp	r3, r0
 800091c:	4637      	mov	r7, r6
 800091e:	dc04      	bgt.n	800092a <__swbuf_r+0x42>
 8000920:	4621      	mov	r1, r4
 8000922:	4628      	mov	r0, r5
 8000924:	f000 f922 	bl	8000b6c <_fflush_r>
 8000928:	bb30      	cbnz	r0, 8000978 <__swbuf_r+0x90>
 800092a:	68a3      	ldr	r3, [r4, #8]
 800092c:	3b01      	subs	r3, #1
 800092e:	60a3      	str	r3, [r4, #8]
 8000930:	6823      	ldr	r3, [r4, #0]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	6022      	str	r2, [r4, #0]
 8000936:	701e      	strb	r6, [r3, #0]
 8000938:	6963      	ldr	r3, [r4, #20]
 800093a:	3001      	adds	r0, #1
 800093c:	4283      	cmp	r3, r0
 800093e:	d004      	beq.n	800094a <__swbuf_r+0x62>
 8000940:	89a3      	ldrh	r3, [r4, #12]
 8000942:	07db      	lsls	r3, r3, #31
 8000944:	d506      	bpl.n	8000954 <__swbuf_r+0x6c>
 8000946:	2e0a      	cmp	r6, #10
 8000948:	d104      	bne.n	8000954 <__swbuf_r+0x6c>
 800094a:	4621      	mov	r1, r4
 800094c:	4628      	mov	r0, r5
 800094e:	f000 f90d 	bl	8000b6c <_fflush_r>
 8000952:	b988      	cbnz	r0, 8000978 <__swbuf_r+0x90>
 8000954:	4638      	mov	r0, r7
 8000956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <__swbuf_r+0x9c>)
 800095a:	429c      	cmp	r4, r3
 800095c:	d101      	bne.n	8000962 <__swbuf_r+0x7a>
 800095e:	68ac      	ldr	r4, [r5, #8]
 8000960:	e7cf      	b.n	8000902 <__swbuf_r+0x1a>
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <__swbuf_r+0xa0>)
 8000964:	429c      	cmp	r4, r3
 8000966:	bf08      	it	eq
 8000968:	68ec      	ldreq	r4, [r5, #12]
 800096a:	e7ca      	b.n	8000902 <__swbuf_r+0x1a>
 800096c:	4621      	mov	r1, r4
 800096e:	4628      	mov	r0, r5
 8000970:	f000 f80c 	bl	800098c <__swsetup_r>
 8000974:	2800      	cmp	r0, #0
 8000976:	d0cb      	beq.n	8000910 <__swbuf_r+0x28>
 8000978:	f04f 37ff 	mov.w	r7, #4294967295
 800097c:	e7ea      	b.n	8000954 <__swbuf_r+0x6c>
 800097e:	bf00      	nop
 8000980:	08001290 	.word	0x08001290
 8000984:	080012b0 	.word	0x080012b0
 8000988:	08001270 	.word	0x08001270

0800098c <__swsetup_r>:
 800098c:	4b32      	ldr	r3, [pc, #200]	; (8000a58 <__swsetup_r+0xcc>)
 800098e:	b570      	push	{r4, r5, r6, lr}
 8000990:	681d      	ldr	r5, [r3, #0]
 8000992:	4606      	mov	r6, r0
 8000994:	460c      	mov	r4, r1
 8000996:	b125      	cbz	r5, 80009a2 <__swsetup_r+0x16>
 8000998:	69ab      	ldr	r3, [r5, #24]
 800099a:	b913      	cbnz	r3, 80009a2 <__swsetup_r+0x16>
 800099c:	4628      	mov	r0, r5
 800099e:	f000 f979 	bl	8000c94 <__sinit>
 80009a2:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <__swsetup_r+0xd0>)
 80009a4:	429c      	cmp	r4, r3
 80009a6:	d10f      	bne.n	80009c8 <__swsetup_r+0x3c>
 80009a8:	686c      	ldr	r4, [r5, #4]
 80009aa:	89a3      	ldrh	r3, [r4, #12]
 80009ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009b0:	0719      	lsls	r1, r3, #28
 80009b2:	d42c      	bmi.n	8000a0e <__swsetup_r+0x82>
 80009b4:	06dd      	lsls	r5, r3, #27
 80009b6:	d411      	bmi.n	80009dc <__swsetup_r+0x50>
 80009b8:	2309      	movs	r3, #9
 80009ba:	6033      	str	r3, [r6, #0]
 80009bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80009c0:	81a3      	strh	r3, [r4, #12]
 80009c2:	f04f 30ff 	mov.w	r0, #4294967295
 80009c6:	e03e      	b.n	8000a46 <__swsetup_r+0xba>
 80009c8:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <__swsetup_r+0xd4>)
 80009ca:	429c      	cmp	r4, r3
 80009cc:	d101      	bne.n	80009d2 <__swsetup_r+0x46>
 80009ce:	68ac      	ldr	r4, [r5, #8]
 80009d0:	e7eb      	b.n	80009aa <__swsetup_r+0x1e>
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <__swsetup_r+0xd8>)
 80009d4:	429c      	cmp	r4, r3
 80009d6:	bf08      	it	eq
 80009d8:	68ec      	ldreq	r4, [r5, #12]
 80009da:	e7e6      	b.n	80009aa <__swsetup_r+0x1e>
 80009dc:	0758      	lsls	r0, r3, #29
 80009de:	d512      	bpl.n	8000a06 <__swsetup_r+0x7a>
 80009e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009e2:	b141      	cbz	r1, 80009f6 <__swsetup_r+0x6a>
 80009e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009e8:	4299      	cmp	r1, r3
 80009ea:	d002      	beq.n	80009f2 <__swsetup_r+0x66>
 80009ec:	4630      	mov	r0, r6
 80009ee:	f000 fa57 	bl	8000ea0 <_free_r>
 80009f2:	2300      	movs	r3, #0
 80009f4:	6363      	str	r3, [r4, #52]	; 0x34
 80009f6:	89a3      	ldrh	r3, [r4, #12]
 80009f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80009fc:	81a3      	strh	r3, [r4, #12]
 80009fe:	2300      	movs	r3, #0
 8000a00:	6063      	str	r3, [r4, #4]
 8000a02:	6923      	ldr	r3, [r4, #16]
 8000a04:	6023      	str	r3, [r4, #0]
 8000a06:	89a3      	ldrh	r3, [r4, #12]
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	81a3      	strh	r3, [r4, #12]
 8000a0e:	6923      	ldr	r3, [r4, #16]
 8000a10:	b94b      	cbnz	r3, 8000a26 <__swsetup_r+0x9a>
 8000a12:	89a3      	ldrh	r3, [r4, #12]
 8000a14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a1c:	d003      	beq.n	8000a26 <__swsetup_r+0x9a>
 8000a1e:	4621      	mov	r1, r4
 8000a20:	4630      	mov	r0, r6
 8000a22:	f000 f9fd 	bl	8000e20 <__smakebuf_r>
 8000a26:	89a0      	ldrh	r0, [r4, #12]
 8000a28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a2c:	f010 0301 	ands.w	r3, r0, #1
 8000a30:	d00a      	beq.n	8000a48 <__swsetup_r+0xbc>
 8000a32:	2300      	movs	r3, #0
 8000a34:	60a3      	str	r3, [r4, #8]
 8000a36:	6963      	ldr	r3, [r4, #20]
 8000a38:	425b      	negs	r3, r3
 8000a3a:	61a3      	str	r3, [r4, #24]
 8000a3c:	6923      	ldr	r3, [r4, #16]
 8000a3e:	b943      	cbnz	r3, 8000a52 <__swsetup_r+0xc6>
 8000a40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a44:	d1ba      	bne.n	80009bc <__swsetup_r+0x30>
 8000a46:	bd70      	pop	{r4, r5, r6, pc}
 8000a48:	0781      	lsls	r1, r0, #30
 8000a4a:	bf58      	it	pl
 8000a4c:	6963      	ldrpl	r3, [r4, #20]
 8000a4e:	60a3      	str	r3, [r4, #8]
 8000a50:	e7f4      	b.n	8000a3c <__swsetup_r+0xb0>
 8000a52:	2000      	movs	r0, #0
 8000a54:	e7f7      	b.n	8000a46 <__swsetup_r+0xba>
 8000a56:	bf00      	nop
 8000a58:	20000010 	.word	0x20000010
 8000a5c:	08001290 	.word	0x08001290
 8000a60:	080012b0 	.word	0x080012b0
 8000a64:	08001270 	.word	0x08001270

08000a68 <__sflush_r>:
 8000a68:	898a      	ldrh	r2, [r1, #12]
 8000a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a6c:	4605      	mov	r5, r0
 8000a6e:	0710      	lsls	r0, r2, #28
 8000a70:	460c      	mov	r4, r1
 8000a72:	d457      	bmi.n	8000b24 <__sflush_r+0xbc>
 8000a74:	684b      	ldr	r3, [r1, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	dc04      	bgt.n	8000a84 <__sflush_r+0x1c>
 8000a7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	dc01      	bgt.n	8000a84 <__sflush_r+0x1c>
 8000a80:	2000      	movs	r0, #0
 8000a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d0fa      	beq.n	8000a80 <__sflush_r+0x18>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000a90:	682f      	ldr	r7, [r5, #0]
 8000a92:	602b      	str	r3, [r5, #0]
 8000a94:	d032      	beq.n	8000afc <__sflush_r+0x94>
 8000a96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000a98:	89a3      	ldrh	r3, [r4, #12]
 8000a9a:	075a      	lsls	r2, r3, #29
 8000a9c:	d505      	bpl.n	8000aaa <__sflush_r+0x42>
 8000a9e:	6863      	ldr	r3, [r4, #4]
 8000aa0:	1ac0      	subs	r0, r0, r3
 8000aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000aa4:	b10b      	cbz	r3, 8000aaa <__sflush_r+0x42>
 8000aa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000aa8:	1ac0      	subs	r0, r0, r3
 8000aaa:	2300      	movs	r3, #0
 8000aac:	4602      	mov	r2, r0
 8000aae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ab0:	6a21      	ldr	r1, [r4, #32]
 8000ab2:	4628      	mov	r0, r5
 8000ab4:	47b0      	blx	r6
 8000ab6:	1c43      	adds	r3, r0, #1
 8000ab8:	89a3      	ldrh	r3, [r4, #12]
 8000aba:	d106      	bne.n	8000aca <__sflush_r+0x62>
 8000abc:	6829      	ldr	r1, [r5, #0]
 8000abe:	291d      	cmp	r1, #29
 8000ac0:	d82c      	bhi.n	8000b1c <__sflush_r+0xb4>
 8000ac2:	4a29      	ldr	r2, [pc, #164]	; (8000b68 <__sflush_r+0x100>)
 8000ac4:	40ca      	lsrs	r2, r1
 8000ac6:	07d6      	lsls	r6, r2, #31
 8000ac8:	d528      	bpl.n	8000b1c <__sflush_r+0xb4>
 8000aca:	2200      	movs	r2, #0
 8000acc:	6062      	str	r2, [r4, #4]
 8000ace:	04d9      	lsls	r1, r3, #19
 8000ad0:	6922      	ldr	r2, [r4, #16]
 8000ad2:	6022      	str	r2, [r4, #0]
 8000ad4:	d504      	bpl.n	8000ae0 <__sflush_r+0x78>
 8000ad6:	1c42      	adds	r2, r0, #1
 8000ad8:	d101      	bne.n	8000ade <__sflush_r+0x76>
 8000ada:	682b      	ldr	r3, [r5, #0]
 8000adc:	b903      	cbnz	r3, 8000ae0 <__sflush_r+0x78>
 8000ade:	6560      	str	r0, [r4, #84]	; 0x54
 8000ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ae2:	602f      	str	r7, [r5, #0]
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	d0cb      	beq.n	8000a80 <__sflush_r+0x18>
 8000ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000aec:	4299      	cmp	r1, r3
 8000aee:	d002      	beq.n	8000af6 <__sflush_r+0x8e>
 8000af0:	4628      	mov	r0, r5
 8000af2:	f000 f9d5 	bl	8000ea0 <_free_r>
 8000af6:	2000      	movs	r0, #0
 8000af8:	6360      	str	r0, [r4, #52]	; 0x34
 8000afa:	e7c2      	b.n	8000a82 <__sflush_r+0x1a>
 8000afc:	6a21      	ldr	r1, [r4, #32]
 8000afe:	2301      	movs	r3, #1
 8000b00:	4628      	mov	r0, r5
 8000b02:	47b0      	blx	r6
 8000b04:	1c41      	adds	r1, r0, #1
 8000b06:	d1c7      	bne.n	8000a98 <__sflush_r+0x30>
 8000b08:	682b      	ldr	r3, [r5, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0c4      	beq.n	8000a98 <__sflush_r+0x30>
 8000b0e:	2b1d      	cmp	r3, #29
 8000b10:	d001      	beq.n	8000b16 <__sflush_r+0xae>
 8000b12:	2b16      	cmp	r3, #22
 8000b14:	d101      	bne.n	8000b1a <__sflush_r+0xb2>
 8000b16:	602f      	str	r7, [r5, #0]
 8000b18:	e7b2      	b.n	8000a80 <__sflush_r+0x18>
 8000b1a:	89a3      	ldrh	r3, [r4, #12]
 8000b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b20:	81a3      	strh	r3, [r4, #12]
 8000b22:	e7ae      	b.n	8000a82 <__sflush_r+0x1a>
 8000b24:	690f      	ldr	r7, [r1, #16]
 8000b26:	2f00      	cmp	r7, #0
 8000b28:	d0aa      	beq.n	8000a80 <__sflush_r+0x18>
 8000b2a:	0793      	lsls	r3, r2, #30
 8000b2c:	680e      	ldr	r6, [r1, #0]
 8000b2e:	bf08      	it	eq
 8000b30:	694b      	ldreq	r3, [r1, #20]
 8000b32:	600f      	str	r7, [r1, #0]
 8000b34:	bf18      	it	ne
 8000b36:	2300      	movne	r3, #0
 8000b38:	1bf6      	subs	r6, r6, r7
 8000b3a:	608b      	str	r3, [r1, #8]
 8000b3c:	2e00      	cmp	r6, #0
 8000b3e:	dd9f      	ble.n	8000a80 <__sflush_r+0x18>
 8000b40:	6a21      	ldr	r1, [r4, #32]
 8000b42:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000b46:	4633      	mov	r3, r6
 8000b48:	463a      	mov	r2, r7
 8000b4a:	4628      	mov	r0, r5
 8000b4c:	47e0      	blx	ip
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	dc06      	bgt.n	8000b60 <__sflush_r+0xf8>
 8000b52:	89a3      	ldrh	r3, [r4, #12]
 8000b54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b58:	81a3      	strh	r3, [r4, #12]
 8000b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5e:	e790      	b.n	8000a82 <__sflush_r+0x1a>
 8000b60:	4407      	add	r7, r0
 8000b62:	1a36      	subs	r6, r6, r0
 8000b64:	e7ea      	b.n	8000b3c <__sflush_r+0xd4>
 8000b66:	bf00      	nop
 8000b68:	20400001 	.word	0x20400001

08000b6c <_fflush_r>:
 8000b6c:	b538      	push	{r3, r4, r5, lr}
 8000b6e:	690b      	ldr	r3, [r1, #16]
 8000b70:	4605      	mov	r5, r0
 8000b72:	460c      	mov	r4, r1
 8000b74:	b913      	cbnz	r3, 8000b7c <_fflush_r+0x10>
 8000b76:	2500      	movs	r5, #0
 8000b78:	4628      	mov	r0, r5
 8000b7a:	bd38      	pop	{r3, r4, r5, pc}
 8000b7c:	b118      	cbz	r0, 8000b86 <_fflush_r+0x1a>
 8000b7e:	6983      	ldr	r3, [r0, #24]
 8000b80:	b90b      	cbnz	r3, 8000b86 <_fflush_r+0x1a>
 8000b82:	f000 f887 	bl	8000c94 <__sinit>
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <_fflush_r+0x6c>)
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	d11b      	bne.n	8000bc4 <_fflush_r+0x58>
 8000b8c:	686c      	ldr	r4, [r5, #4]
 8000b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0ef      	beq.n	8000b76 <_fflush_r+0xa>
 8000b96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000b98:	07d0      	lsls	r0, r2, #31
 8000b9a:	d404      	bmi.n	8000ba6 <_fflush_r+0x3a>
 8000b9c:	0599      	lsls	r1, r3, #22
 8000b9e:	d402      	bmi.n	8000ba6 <_fflush_r+0x3a>
 8000ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ba2:	f000 f915 	bl	8000dd0 <__retarget_lock_acquire_recursive>
 8000ba6:	4628      	mov	r0, r5
 8000ba8:	4621      	mov	r1, r4
 8000baa:	f7ff ff5d 	bl	8000a68 <__sflush_r>
 8000bae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000bb0:	07da      	lsls	r2, r3, #31
 8000bb2:	4605      	mov	r5, r0
 8000bb4:	d4e0      	bmi.n	8000b78 <_fflush_r+0xc>
 8000bb6:	89a3      	ldrh	r3, [r4, #12]
 8000bb8:	059b      	lsls	r3, r3, #22
 8000bba:	d4dd      	bmi.n	8000b78 <_fflush_r+0xc>
 8000bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000bbe:	f000 f908 	bl	8000dd2 <__retarget_lock_release_recursive>
 8000bc2:	e7d9      	b.n	8000b78 <_fflush_r+0xc>
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <_fflush_r+0x70>)
 8000bc6:	429c      	cmp	r4, r3
 8000bc8:	d101      	bne.n	8000bce <_fflush_r+0x62>
 8000bca:	68ac      	ldr	r4, [r5, #8]
 8000bcc:	e7df      	b.n	8000b8e <_fflush_r+0x22>
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <_fflush_r+0x74>)
 8000bd0:	429c      	cmp	r4, r3
 8000bd2:	bf08      	it	eq
 8000bd4:	68ec      	ldreq	r4, [r5, #12]
 8000bd6:	e7da      	b.n	8000b8e <_fflush_r+0x22>
 8000bd8:	08001290 	.word	0x08001290
 8000bdc:	080012b0 	.word	0x080012b0
 8000be0:	08001270 	.word	0x08001270

08000be4 <std>:
 8000be4:	2300      	movs	r3, #0
 8000be6:	b510      	push	{r4, lr}
 8000be8:	4604      	mov	r4, r0
 8000bea:	e9c0 3300 	strd	r3, r3, [r0]
 8000bee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000bf2:	6083      	str	r3, [r0, #8]
 8000bf4:	8181      	strh	r1, [r0, #12]
 8000bf6:	6643      	str	r3, [r0, #100]	; 0x64
 8000bf8:	81c2      	strh	r2, [r0, #14]
 8000bfa:	6183      	str	r3, [r0, #24]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	2208      	movs	r2, #8
 8000c00:	305c      	adds	r0, #92	; 0x5c
 8000c02:	f7ff fdf3 	bl	80007ec <memset>
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <std+0x38>)
 8000c08:	6263      	str	r3, [r4, #36]	; 0x24
 8000c0a:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <std+0x3c>)
 8000c0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <std+0x40>)
 8000c10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <std+0x44>)
 8000c14:	6224      	str	r4, [r4, #32]
 8000c16:	6323      	str	r3, [r4, #48]	; 0x30
 8000c18:	bd10      	pop	{r4, pc}
 8000c1a:	bf00      	nop
 8000c1c:	0800107d 	.word	0x0800107d
 8000c20:	0800109f 	.word	0x0800109f
 8000c24:	080010d7 	.word	0x080010d7
 8000c28:	080010fb 	.word	0x080010fb

08000c2c <_cleanup_r>:
 8000c2c:	4901      	ldr	r1, [pc, #4]	; (8000c34 <_cleanup_r+0x8>)
 8000c2e:	f000 b8af 	b.w	8000d90 <_fwalk_reent>
 8000c32:	bf00      	nop
 8000c34:	08000b6d 	.word	0x08000b6d

08000c38 <__sfmoreglue>:
 8000c38:	b570      	push	{r4, r5, r6, lr}
 8000c3a:	2268      	movs	r2, #104	; 0x68
 8000c3c:	1e4d      	subs	r5, r1, #1
 8000c3e:	4355      	muls	r5, r2
 8000c40:	460e      	mov	r6, r1
 8000c42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000c46:	f000 f995 	bl	8000f74 <_malloc_r>
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	b140      	cbz	r0, 8000c60 <__sfmoreglue+0x28>
 8000c4e:	2100      	movs	r1, #0
 8000c50:	e9c0 1600 	strd	r1, r6, [r0]
 8000c54:	300c      	adds	r0, #12
 8000c56:	60a0      	str	r0, [r4, #8]
 8000c58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000c5c:	f7ff fdc6 	bl	80007ec <memset>
 8000c60:	4620      	mov	r0, r4
 8000c62:	bd70      	pop	{r4, r5, r6, pc}

08000c64 <__sfp_lock_acquire>:
 8000c64:	4801      	ldr	r0, [pc, #4]	; (8000c6c <__sfp_lock_acquire+0x8>)
 8000c66:	f000 b8b3 	b.w	8000dd0 <__retarget_lock_acquire_recursive>
 8000c6a:	bf00      	nop
 8000c6c:	200000a9 	.word	0x200000a9

08000c70 <__sfp_lock_release>:
 8000c70:	4801      	ldr	r0, [pc, #4]	; (8000c78 <__sfp_lock_release+0x8>)
 8000c72:	f000 b8ae 	b.w	8000dd2 <__retarget_lock_release_recursive>
 8000c76:	bf00      	nop
 8000c78:	200000a9 	.word	0x200000a9

08000c7c <__sinit_lock_acquire>:
 8000c7c:	4801      	ldr	r0, [pc, #4]	; (8000c84 <__sinit_lock_acquire+0x8>)
 8000c7e:	f000 b8a7 	b.w	8000dd0 <__retarget_lock_acquire_recursive>
 8000c82:	bf00      	nop
 8000c84:	200000aa 	.word	0x200000aa

08000c88 <__sinit_lock_release>:
 8000c88:	4801      	ldr	r0, [pc, #4]	; (8000c90 <__sinit_lock_release+0x8>)
 8000c8a:	f000 b8a2 	b.w	8000dd2 <__retarget_lock_release_recursive>
 8000c8e:	bf00      	nop
 8000c90:	200000aa 	.word	0x200000aa

08000c94 <__sinit>:
 8000c94:	b510      	push	{r4, lr}
 8000c96:	4604      	mov	r4, r0
 8000c98:	f7ff fff0 	bl	8000c7c <__sinit_lock_acquire>
 8000c9c:	69a3      	ldr	r3, [r4, #24]
 8000c9e:	b11b      	cbz	r3, 8000ca8 <__sinit+0x14>
 8000ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ca4:	f7ff bff0 	b.w	8000c88 <__sinit_lock_release>
 8000ca8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000cac:	6523      	str	r3, [r4, #80]	; 0x50
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <__sinit+0x68>)
 8000cb0:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <__sinit+0x6c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8000cb6:	42a3      	cmp	r3, r4
 8000cb8:	bf04      	itt	eq
 8000cba:	2301      	moveq	r3, #1
 8000cbc:	61a3      	streq	r3, [r4, #24]
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	f000 f820 	bl	8000d04 <__sfp>
 8000cc4:	6060      	str	r0, [r4, #4]
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f000 f81c 	bl	8000d04 <__sfp>
 8000ccc:	60a0      	str	r0, [r4, #8]
 8000cce:	4620      	mov	r0, r4
 8000cd0:	f000 f818 	bl	8000d04 <__sfp>
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60e0      	str	r0, [r4, #12]
 8000cd8:	2104      	movs	r1, #4
 8000cda:	6860      	ldr	r0, [r4, #4]
 8000cdc:	f7ff ff82 	bl	8000be4 <std>
 8000ce0:	68a0      	ldr	r0, [r4, #8]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2109      	movs	r1, #9
 8000ce6:	f7ff ff7d 	bl	8000be4 <std>
 8000cea:	68e0      	ldr	r0, [r4, #12]
 8000cec:	2202      	movs	r2, #2
 8000cee:	2112      	movs	r1, #18
 8000cf0:	f7ff ff78 	bl	8000be4 <std>
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61a3      	str	r3, [r4, #24]
 8000cf8:	e7d2      	b.n	8000ca0 <__sinit+0xc>
 8000cfa:	bf00      	nop
 8000cfc:	0800126c 	.word	0x0800126c
 8000d00:	08000c2d 	.word	0x08000c2d

08000d04 <__sfp>:
 8000d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d06:	4607      	mov	r7, r0
 8000d08:	f7ff ffac 	bl	8000c64 <__sfp_lock_acquire>
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <__sfp+0x84>)
 8000d0e:	681e      	ldr	r6, [r3, #0]
 8000d10:	69b3      	ldr	r3, [r6, #24]
 8000d12:	b913      	cbnz	r3, 8000d1a <__sfp+0x16>
 8000d14:	4630      	mov	r0, r6
 8000d16:	f7ff ffbd 	bl	8000c94 <__sinit>
 8000d1a:	3648      	adds	r6, #72	; 0x48
 8000d1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	d503      	bpl.n	8000d2c <__sfp+0x28>
 8000d24:	6833      	ldr	r3, [r6, #0]
 8000d26:	b30b      	cbz	r3, 8000d6c <__sfp+0x68>
 8000d28:	6836      	ldr	r6, [r6, #0]
 8000d2a:	e7f7      	b.n	8000d1c <__sfp+0x18>
 8000d2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000d30:	b9d5      	cbnz	r5, 8000d68 <__sfp+0x64>
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <__sfp+0x88>)
 8000d34:	60e3      	str	r3, [r4, #12]
 8000d36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000d3a:	6665      	str	r5, [r4, #100]	; 0x64
 8000d3c:	f000 f847 	bl	8000dce <__retarget_lock_init_recursive>
 8000d40:	f7ff ff96 	bl	8000c70 <__sfp_lock_release>
 8000d44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000d48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000d4c:	6025      	str	r5, [r4, #0]
 8000d4e:	61a5      	str	r5, [r4, #24]
 8000d50:	2208      	movs	r2, #8
 8000d52:	4629      	mov	r1, r5
 8000d54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000d58:	f7ff fd48 	bl	80007ec <memset>
 8000d5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000d60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000d64:	4620      	mov	r0, r4
 8000d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d68:	3468      	adds	r4, #104	; 0x68
 8000d6a:	e7d9      	b.n	8000d20 <__sfp+0x1c>
 8000d6c:	2104      	movs	r1, #4
 8000d6e:	4638      	mov	r0, r7
 8000d70:	f7ff ff62 	bl	8000c38 <__sfmoreglue>
 8000d74:	4604      	mov	r4, r0
 8000d76:	6030      	str	r0, [r6, #0]
 8000d78:	2800      	cmp	r0, #0
 8000d7a:	d1d5      	bne.n	8000d28 <__sfp+0x24>
 8000d7c:	f7ff ff78 	bl	8000c70 <__sfp_lock_release>
 8000d80:	230c      	movs	r3, #12
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	e7ee      	b.n	8000d64 <__sfp+0x60>
 8000d86:	bf00      	nop
 8000d88:	0800126c 	.word	0x0800126c
 8000d8c:	ffff0001 	.word	0xffff0001

08000d90 <_fwalk_reent>:
 8000d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d94:	4606      	mov	r6, r0
 8000d96:	4688      	mov	r8, r1
 8000d98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000d9c:	2700      	movs	r7, #0
 8000d9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000da2:	f1b9 0901 	subs.w	r9, r9, #1
 8000da6:	d505      	bpl.n	8000db4 <_fwalk_reent+0x24>
 8000da8:	6824      	ldr	r4, [r4, #0]
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	d1f7      	bne.n	8000d9e <_fwalk_reent+0xe>
 8000dae:	4638      	mov	r0, r7
 8000db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000db4:	89ab      	ldrh	r3, [r5, #12]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d907      	bls.n	8000dca <_fwalk_reent+0x3a>
 8000dba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	d003      	beq.n	8000dca <_fwalk_reent+0x3a>
 8000dc2:	4629      	mov	r1, r5
 8000dc4:	4630      	mov	r0, r6
 8000dc6:	47c0      	blx	r8
 8000dc8:	4307      	orrs	r7, r0
 8000dca:	3568      	adds	r5, #104	; 0x68
 8000dcc:	e7e9      	b.n	8000da2 <_fwalk_reent+0x12>

08000dce <__retarget_lock_init_recursive>:
 8000dce:	4770      	bx	lr

08000dd0 <__retarget_lock_acquire_recursive>:
 8000dd0:	4770      	bx	lr

08000dd2 <__retarget_lock_release_recursive>:
 8000dd2:	4770      	bx	lr

08000dd4 <__swhatbuf_r>:
 8000dd4:	b570      	push	{r4, r5, r6, lr}
 8000dd6:	460e      	mov	r6, r1
 8000dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ddc:	2900      	cmp	r1, #0
 8000dde:	b096      	sub	sp, #88	; 0x58
 8000de0:	4614      	mov	r4, r2
 8000de2:	461d      	mov	r5, r3
 8000de4:	da08      	bge.n	8000df8 <__swhatbuf_r+0x24>
 8000de6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000dea:	2200      	movs	r2, #0
 8000dec:	602a      	str	r2, [r5, #0]
 8000dee:	061a      	lsls	r2, r3, #24
 8000df0:	d410      	bmi.n	8000e14 <__swhatbuf_r+0x40>
 8000df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000df6:	e00e      	b.n	8000e16 <__swhatbuf_r+0x42>
 8000df8:	466a      	mov	r2, sp
 8000dfa:	f000 f9a5 	bl	8001148 <_fstat_r>
 8000dfe:	2800      	cmp	r0, #0
 8000e00:	dbf1      	blt.n	8000de6 <__swhatbuf_r+0x12>
 8000e02:	9a01      	ldr	r2, [sp, #4]
 8000e04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000e08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000e0c:	425a      	negs	r2, r3
 8000e0e:	415a      	adcs	r2, r3
 8000e10:	602a      	str	r2, [r5, #0]
 8000e12:	e7ee      	b.n	8000df2 <__swhatbuf_r+0x1e>
 8000e14:	2340      	movs	r3, #64	; 0x40
 8000e16:	2000      	movs	r0, #0
 8000e18:	6023      	str	r3, [r4, #0]
 8000e1a:	b016      	add	sp, #88	; 0x58
 8000e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000e20 <__smakebuf_r>:
 8000e20:	898b      	ldrh	r3, [r1, #12]
 8000e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e24:	079d      	lsls	r5, r3, #30
 8000e26:	4606      	mov	r6, r0
 8000e28:	460c      	mov	r4, r1
 8000e2a:	d507      	bpl.n	8000e3c <__smakebuf_r+0x1c>
 8000e2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000e30:	6023      	str	r3, [r4, #0]
 8000e32:	6123      	str	r3, [r4, #16]
 8000e34:	2301      	movs	r3, #1
 8000e36:	6163      	str	r3, [r4, #20]
 8000e38:	b002      	add	sp, #8
 8000e3a:	bd70      	pop	{r4, r5, r6, pc}
 8000e3c:	ab01      	add	r3, sp, #4
 8000e3e:	466a      	mov	r2, sp
 8000e40:	f7ff ffc8 	bl	8000dd4 <__swhatbuf_r>
 8000e44:	9900      	ldr	r1, [sp, #0]
 8000e46:	4605      	mov	r5, r0
 8000e48:	4630      	mov	r0, r6
 8000e4a:	f000 f893 	bl	8000f74 <_malloc_r>
 8000e4e:	b948      	cbnz	r0, 8000e64 <__smakebuf_r+0x44>
 8000e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e54:	059a      	lsls	r2, r3, #22
 8000e56:	d4ef      	bmi.n	8000e38 <__smakebuf_r+0x18>
 8000e58:	f023 0303 	bic.w	r3, r3, #3
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	81a3      	strh	r3, [r4, #12]
 8000e62:	e7e3      	b.n	8000e2c <__smakebuf_r+0xc>
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <__smakebuf_r+0x7c>)
 8000e66:	62b3      	str	r3, [r6, #40]	; 0x28
 8000e68:	89a3      	ldrh	r3, [r4, #12]
 8000e6a:	6020      	str	r0, [r4, #0]
 8000e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e70:	81a3      	strh	r3, [r4, #12]
 8000e72:	9b00      	ldr	r3, [sp, #0]
 8000e74:	6163      	str	r3, [r4, #20]
 8000e76:	9b01      	ldr	r3, [sp, #4]
 8000e78:	6120      	str	r0, [r4, #16]
 8000e7a:	b15b      	cbz	r3, 8000e94 <__smakebuf_r+0x74>
 8000e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e80:	4630      	mov	r0, r6
 8000e82:	f000 f973 	bl	800116c <_isatty_r>
 8000e86:	b128      	cbz	r0, 8000e94 <__smakebuf_r+0x74>
 8000e88:	89a3      	ldrh	r3, [r4, #12]
 8000e8a:	f023 0303 	bic.w	r3, r3, #3
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	81a3      	strh	r3, [r4, #12]
 8000e94:	89a0      	ldrh	r0, [r4, #12]
 8000e96:	4305      	orrs	r5, r0
 8000e98:	81a5      	strh	r5, [r4, #12]
 8000e9a:	e7cd      	b.n	8000e38 <__smakebuf_r+0x18>
 8000e9c:	08000c2d 	.word	0x08000c2d

08000ea0 <_free_r>:
 8000ea0:	b538      	push	{r3, r4, r5, lr}
 8000ea2:	4605      	mov	r5, r0
 8000ea4:	2900      	cmp	r1, #0
 8000ea6:	d041      	beq.n	8000f2c <_free_r+0x8c>
 8000ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000eac:	1f0c      	subs	r4, r1, #4
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	bfb8      	it	lt
 8000eb2:	18e4      	addlt	r4, r4, r3
 8000eb4:	f000 f97c 	bl	80011b0 <__malloc_lock>
 8000eb8:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <_free_r+0x90>)
 8000eba:	6813      	ldr	r3, [r2, #0]
 8000ebc:	b933      	cbnz	r3, 8000ecc <_free_r+0x2c>
 8000ebe:	6063      	str	r3, [r4, #4]
 8000ec0:	6014      	str	r4, [r2, #0]
 8000ec2:	4628      	mov	r0, r5
 8000ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ec8:	f000 b978 	b.w	80011bc <__malloc_unlock>
 8000ecc:	42a3      	cmp	r3, r4
 8000ece:	d908      	bls.n	8000ee2 <_free_r+0x42>
 8000ed0:	6820      	ldr	r0, [r4, #0]
 8000ed2:	1821      	adds	r1, r4, r0
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf01      	itttt	eq
 8000ed8:	6819      	ldreq	r1, [r3, #0]
 8000eda:	685b      	ldreq	r3, [r3, #4]
 8000edc:	1809      	addeq	r1, r1, r0
 8000ede:	6021      	streq	r1, [r4, #0]
 8000ee0:	e7ed      	b.n	8000ebe <_free_r+0x1e>
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	b10b      	cbz	r3, 8000eec <_free_r+0x4c>
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d9fa      	bls.n	8000ee2 <_free_r+0x42>
 8000eec:	6811      	ldr	r1, [r2, #0]
 8000eee:	1850      	adds	r0, r2, r1
 8000ef0:	42a0      	cmp	r0, r4
 8000ef2:	d10b      	bne.n	8000f0c <_free_r+0x6c>
 8000ef4:	6820      	ldr	r0, [r4, #0]
 8000ef6:	4401      	add	r1, r0
 8000ef8:	1850      	adds	r0, r2, r1
 8000efa:	4283      	cmp	r3, r0
 8000efc:	6011      	str	r1, [r2, #0]
 8000efe:	d1e0      	bne.n	8000ec2 <_free_r+0x22>
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	6053      	str	r3, [r2, #4]
 8000f06:	4401      	add	r1, r0
 8000f08:	6011      	str	r1, [r2, #0]
 8000f0a:	e7da      	b.n	8000ec2 <_free_r+0x22>
 8000f0c:	d902      	bls.n	8000f14 <_free_r+0x74>
 8000f0e:	230c      	movs	r3, #12
 8000f10:	602b      	str	r3, [r5, #0]
 8000f12:	e7d6      	b.n	8000ec2 <_free_r+0x22>
 8000f14:	6820      	ldr	r0, [r4, #0]
 8000f16:	1821      	adds	r1, r4, r0
 8000f18:	428b      	cmp	r3, r1
 8000f1a:	bf04      	itt	eq
 8000f1c:	6819      	ldreq	r1, [r3, #0]
 8000f1e:	685b      	ldreq	r3, [r3, #4]
 8000f20:	6063      	str	r3, [r4, #4]
 8000f22:	bf04      	itt	eq
 8000f24:	1809      	addeq	r1, r1, r0
 8000f26:	6021      	streq	r1, [r4, #0]
 8000f28:	6054      	str	r4, [r2, #4]
 8000f2a:	e7ca      	b.n	8000ec2 <_free_r+0x22>
 8000f2c:	bd38      	pop	{r3, r4, r5, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000ac 	.word	0x200000ac

08000f34 <sbrk_aligned>:
 8000f34:	b570      	push	{r4, r5, r6, lr}
 8000f36:	4e0e      	ldr	r6, [pc, #56]	; (8000f70 <sbrk_aligned+0x3c>)
 8000f38:	460c      	mov	r4, r1
 8000f3a:	6831      	ldr	r1, [r6, #0]
 8000f3c:	4605      	mov	r5, r0
 8000f3e:	b911      	cbnz	r1, 8000f46 <sbrk_aligned+0x12>
 8000f40:	f000 f88c 	bl	800105c <_sbrk_r>
 8000f44:	6030      	str	r0, [r6, #0]
 8000f46:	4621      	mov	r1, r4
 8000f48:	4628      	mov	r0, r5
 8000f4a:	f000 f887 	bl	800105c <_sbrk_r>
 8000f4e:	1c43      	adds	r3, r0, #1
 8000f50:	d00a      	beq.n	8000f68 <sbrk_aligned+0x34>
 8000f52:	1cc4      	adds	r4, r0, #3
 8000f54:	f024 0403 	bic.w	r4, r4, #3
 8000f58:	42a0      	cmp	r0, r4
 8000f5a:	d007      	beq.n	8000f6c <sbrk_aligned+0x38>
 8000f5c:	1a21      	subs	r1, r4, r0
 8000f5e:	4628      	mov	r0, r5
 8000f60:	f000 f87c 	bl	800105c <_sbrk_r>
 8000f64:	3001      	adds	r0, #1
 8000f66:	d101      	bne.n	8000f6c <sbrk_aligned+0x38>
 8000f68:	f04f 34ff 	mov.w	r4, #4294967295
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	bd70      	pop	{r4, r5, r6, pc}
 8000f70:	200000b0 	.word	0x200000b0

08000f74 <_malloc_r>:
 8000f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f78:	1ccd      	adds	r5, r1, #3
 8000f7a:	f025 0503 	bic.w	r5, r5, #3
 8000f7e:	3508      	adds	r5, #8
 8000f80:	2d0c      	cmp	r5, #12
 8000f82:	bf38      	it	cc
 8000f84:	250c      	movcc	r5, #12
 8000f86:	2d00      	cmp	r5, #0
 8000f88:	4607      	mov	r7, r0
 8000f8a:	db01      	blt.n	8000f90 <_malloc_r+0x1c>
 8000f8c:	42a9      	cmp	r1, r5
 8000f8e:	d905      	bls.n	8000f9c <_malloc_r+0x28>
 8000f90:	230c      	movs	r3, #12
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	2600      	movs	r6, #0
 8000f96:	4630      	mov	r0, r6
 8000f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f9c:	4e2e      	ldr	r6, [pc, #184]	; (8001058 <_malloc_r+0xe4>)
 8000f9e:	f000 f907 	bl	80011b0 <__malloc_lock>
 8000fa2:	6833      	ldr	r3, [r6, #0]
 8000fa4:	461c      	mov	r4, r3
 8000fa6:	bb34      	cbnz	r4, 8000ff6 <_malloc_r+0x82>
 8000fa8:	4629      	mov	r1, r5
 8000faa:	4638      	mov	r0, r7
 8000fac:	f7ff ffc2 	bl	8000f34 <sbrk_aligned>
 8000fb0:	1c43      	adds	r3, r0, #1
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	d14d      	bne.n	8001052 <_malloc_r+0xde>
 8000fb6:	6834      	ldr	r4, [r6, #0]
 8000fb8:	4626      	mov	r6, r4
 8000fba:	2e00      	cmp	r6, #0
 8000fbc:	d140      	bne.n	8001040 <_malloc_r+0xcc>
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	4638      	mov	r0, r7
 8000fc4:	eb04 0803 	add.w	r8, r4, r3
 8000fc8:	f000 f848 	bl	800105c <_sbrk_r>
 8000fcc:	4580      	cmp	r8, r0
 8000fce:	d13a      	bne.n	8001046 <_malloc_r+0xd2>
 8000fd0:	6821      	ldr	r1, [r4, #0]
 8000fd2:	3503      	adds	r5, #3
 8000fd4:	1a6d      	subs	r5, r5, r1
 8000fd6:	f025 0503 	bic.w	r5, r5, #3
 8000fda:	3508      	adds	r5, #8
 8000fdc:	2d0c      	cmp	r5, #12
 8000fde:	bf38      	it	cc
 8000fe0:	250c      	movcc	r5, #12
 8000fe2:	4629      	mov	r1, r5
 8000fe4:	4638      	mov	r0, r7
 8000fe6:	f7ff ffa5 	bl	8000f34 <sbrk_aligned>
 8000fea:	3001      	adds	r0, #1
 8000fec:	d02b      	beq.n	8001046 <_malloc_r+0xd2>
 8000fee:	6823      	ldr	r3, [r4, #0]
 8000ff0:	442b      	add	r3, r5
 8000ff2:	6023      	str	r3, [r4, #0]
 8000ff4:	e00e      	b.n	8001014 <_malloc_r+0xa0>
 8000ff6:	6822      	ldr	r2, [r4, #0]
 8000ff8:	1b52      	subs	r2, r2, r5
 8000ffa:	d41e      	bmi.n	800103a <_malloc_r+0xc6>
 8000ffc:	2a0b      	cmp	r2, #11
 8000ffe:	d916      	bls.n	800102e <_malloc_r+0xba>
 8001000:	1961      	adds	r1, r4, r5
 8001002:	42a3      	cmp	r3, r4
 8001004:	6025      	str	r5, [r4, #0]
 8001006:	bf18      	it	ne
 8001008:	6059      	strne	r1, [r3, #4]
 800100a:	6863      	ldr	r3, [r4, #4]
 800100c:	bf08      	it	eq
 800100e:	6031      	streq	r1, [r6, #0]
 8001010:	5162      	str	r2, [r4, r5]
 8001012:	604b      	str	r3, [r1, #4]
 8001014:	4638      	mov	r0, r7
 8001016:	f104 060b 	add.w	r6, r4, #11
 800101a:	f000 f8cf 	bl	80011bc <__malloc_unlock>
 800101e:	f026 0607 	bic.w	r6, r6, #7
 8001022:	1d23      	adds	r3, r4, #4
 8001024:	1af2      	subs	r2, r6, r3
 8001026:	d0b6      	beq.n	8000f96 <_malloc_r+0x22>
 8001028:	1b9b      	subs	r3, r3, r6
 800102a:	50a3      	str	r3, [r4, r2]
 800102c:	e7b3      	b.n	8000f96 <_malloc_r+0x22>
 800102e:	6862      	ldr	r2, [r4, #4]
 8001030:	42a3      	cmp	r3, r4
 8001032:	bf0c      	ite	eq
 8001034:	6032      	streq	r2, [r6, #0]
 8001036:	605a      	strne	r2, [r3, #4]
 8001038:	e7ec      	b.n	8001014 <_malloc_r+0xa0>
 800103a:	4623      	mov	r3, r4
 800103c:	6864      	ldr	r4, [r4, #4]
 800103e:	e7b2      	b.n	8000fa6 <_malloc_r+0x32>
 8001040:	4634      	mov	r4, r6
 8001042:	6876      	ldr	r6, [r6, #4]
 8001044:	e7b9      	b.n	8000fba <_malloc_r+0x46>
 8001046:	230c      	movs	r3, #12
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4638      	mov	r0, r7
 800104c:	f000 f8b6 	bl	80011bc <__malloc_unlock>
 8001050:	e7a1      	b.n	8000f96 <_malloc_r+0x22>
 8001052:	6025      	str	r5, [r4, #0]
 8001054:	e7de      	b.n	8001014 <_malloc_r+0xa0>
 8001056:	bf00      	nop
 8001058:	200000ac 	.word	0x200000ac

0800105c <_sbrk_r>:
 800105c:	b538      	push	{r3, r4, r5, lr}
 800105e:	4d06      	ldr	r5, [pc, #24]	; (8001078 <_sbrk_r+0x1c>)
 8001060:	2300      	movs	r3, #0
 8001062:	4604      	mov	r4, r0
 8001064:	4608      	mov	r0, r1
 8001066:	602b      	str	r3, [r5, #0]
 8001068:	f7ff fb36 	bl	80006d8 <_sbrk>
 800106c:	1c43      	adds	r3, r0, #1
 800106e:	d102      	bne.n	8001076 <_sbrk_r+0x1a>
 8001070:	682b      	ldr	r3, [r5, #0]
 8001072:	b103      	cbz	r3, 8001076 <_sbrk_r+0x1a>
 8001074:	6023      	str	r3, [r4, #0]
 8001076:	bd38      	pop	{r3, r4, r5, pc}
 8001078:	200000b4 	.word	0x200000b4

0800107c <__sread>:
 800107c:	b510      	push	{r4, lr}
 800107e:	460c      	mov	r4, r1
 8001080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001084:	f000 f8a0 	bl	80011c8 <_read_r>
 8001088:	2800      	cmp	r0, #0
 800108a:	bfab      	itete	ge
 800108c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800108e:	89a3      	ldrhlt	r3, [r4, #12]
 8001090:	181b      	addge	r3, r3, r0
 8001092:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001096:	bfac      	ite	ge
 8001098:	6563      	strge	r3, [r4, #84]	; 0x54
 800109a:	81a3      	strhlt	r3, [r4, #12]
 800109c:	bd10      	pop	{r4, pc}

0800109e <__swrite>:
 800109e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010a2:	461f      	mov	r7, r3
 80010a4:	898b      	ldrh	r3, [r1, #12]
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	4605      	mov	r5, r0
 80010aa:	460c      	mov	r4, r1
 80010ac:	4616      	mov	r6, r2
 80010ae:	d505      	bpl.n	80010bc <__swrite+0x1e>
 80010b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010b4:	2302      	movs	r3, #2
 80010b6:	2200      	movs	r2, #0
 80010b8:	f000 f868 	bl	800118c <_lseek_r>
 80010bc:	89a3      	ldrh	r3, [r4, #12]
 80010be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80010c6:	81a3      	strh	r3, [r4, #12]
 80010c8:	4632      	mov	r2, r6
 80010ca:	463b      	mov	r3, r7
 80010cc:	4628      	mov	r0, r5
 80010ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010d2:	f000 b817 	b.w	8001104 <_write_r>

080010d6 <__sseek>:
 80010d6:	b510      	push	{r4, lr}
 80010d8:	460c      	mov	r4, r1
 80010da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010de:	f000 f855 	bl	800118c <_lseek_r>
 80010e2:	1c43      	adds	r3, r0, #1
 80010e4:	89a3      	ldrh	r3, [r4, #12]
 80010e6:	bf15      	itete	ne
 80010e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80010ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80010ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010f2:	81a3      	strheq	r3, [r4, #12]
 80010f4:	bf18      	it	ne
 80010f6:	81a3      	strhne	r3, [r4, #12]
 80010f8:	bd10      	pop	{r4, pc}

080010fa <__sclose>:
 80010fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010fe:	f000 b813 	b.w	8001128 <_close_r>
	...

08001104 <_write_r>:
 8001104:	b538      	push	{r3, r4, r5, lr}
 8001106:	4d07      	ldr	r5, [pc, #28]	; (8001124 <_write_r+0x20>)
 8001108:	4604      	mov	r4, r0
 800110a:	4608      	mov	r0, r1
 800110c:	4611      	mov	r1, r2
 800110e:	2200      	movs	r2, #0
 8001110:	602a      	str	r2, [r5, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	f7ff fa93 	bl	800063e <_write>
 8001118:	1c43      	adds	r3, r0, #1
 800111a:	d102      	bne.n	8001122 <_write_r+0x1e>
 800111c:	682b      	ldr	r3, [r5, #0]
 800111e:	b103      	cbz	r3, 8001122 <_write_r+0x1e>
 8001120:	6023      	str	r3, [r4, #0]
 8001122:	bd38      	pop	{r3, r4, r5, pc}
 8001124:	200000b4 	.word	0x200000b4

08001128 <_close_r>:
 8001128:	b538      	push	{r3, r4, r5, lr}
 800112a:	4d06      	ldr	r5, [pc, #24]	; (8001144 <_close_r+0x1c>)
 800112c:	2300      	movs	r3, #0
 800112e:	4604      	mov	r4, r0
 8001130:	4608      	mov	r0, r1
 8001132:	602b      	str	r3, [r5, #0]
 8001134:	f7ff fa9f 	bl	8000676 <_close>
 8001138:	1c43      	adds	r3, r0, #1
 800113a:	d102      	bne.n	8001142 <_close_r+0x1a>
 800113c:	682b      	ldr	r3, [r5, #0]
 800113e:	b103      	cbz	r3, 8001142 <_close_r+0x1a>
 8001140:	6023      	str	r3, [r4, #0]
 8001142:	bd38      	pop	{r3, r4, r5, pc}
 8001144:	200000b4 	.word	0x200000b4

08001148 <_fstat_r>:
 8001148:	b538      	push	{r3, r4, r5, lr}
 800114a:	4d07      	ldr	r5, [pc, #28]	; (8001168 <_fstat_r+0x20>)
 800114c:	2300      	movs	r3, #0
 800114e:	4604      	mov	r4, r0
 8001150:	4608      	mov	r0, r1
 8001152:	4611      	mov	r1, r2
 8001154:	602b      	str	r3, [r5, #0]
 8001156:	f7ff fa99 	bl	800068c <_fstat>
 800115a:	1c43      	adds	r3, r0, #1
 800115c:	d102      	bne.n	8001164 <_fstat_r+0x1c>
 800115e:	682b      	ldr	r3, [r5, #0]
 8001160:	b103      	cbz	r3, 8001164 <_fstat_r+0x1c>
 8001162:	6023      	str	r3, [r4, #0]
 8001164:	bd38      	pop	{r3, r4, r5, pc}
 8001166:	bf00      	nop
 8001168:	200000b4 	.word	0x200000b4

0800116c <_isatty_r>:
 800116c:	b538      	push	{r3, r4, r5, lr}
 800116e:	4d06      	ldr	r5, [pc, #24]	; (8001188 <_isatty_r+0x1c>)
 8001170:	2300      	movs	r3, #0
 8001172:	4604      	mov	r4, r0
 8001174:	4608      	mov	r0, r1
 8001176:	602b      	str	r3, [r5, #0]
 8001178:	f7ff fa97 	bl	80006aa <_isatty>
 800117c:	1c43      	adds	r3, r0, #1
 800117e:	d102      	bne.n	8001186 <_isatty_r+0x1a>
 8001180:	682b      	ldr	r3, [r5, #0]
 8001182:	b103      	cbz	r3, 8001186 <_isatty_r+0x1a>
 8001184:	6023      	str	r3, [r4, #0]
 8001186:	bd38      	pop	{r3, r4, r5, pc}
 8001188:	200000b4 	.word	0x200000b4

0800118c <_lseek_r>:
 800118c:	b538      	push	{r3, r4, r5, lr}
 800118e:	4d07      	ldr	r5, [pc, #28]	; (80011ac <_lseek_r+0x20>)
 8001190:	4604      	mov	r4, r0
 8001192:	4608      	mov	r0, r1
 8001194:	4611      	mov	r1, r2
 8001196:	2200      	movs	r2, #0
 8001198:	602a      	str	r2, [r5, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	f7ff fa8f 	bl	80006be <_lseek>
 80011a0:	1c43      	adds	r3, r0, #1
 80011a2:	d102      	bne.n	80011aa <_lseek_r+0x1e>
 80011a4:	682b      	ldr	r3, [r5, #0]
 80011a6:	b103      	cbz	r3, 80011aa <_lseek_r+0x1e>
 80011a8:	6023      	str	r3, [r4, #0]
 80011aa:	bd38      	pop	{r3, r4, r5, pc}
 80011ac:	200000b4 	.word	0x200000b4

080011b0 <__malloc_lock>:
 80011b0:	4801      	ldr	r0, [pc, #4]	; (80011b8 <__malloc_lock+0x8>)
 80011b2:	f7ff be0d 	b.w	8000dd0 <__retarget_lock_acquire_recursive>
 80011b6:	bf00      	nop
 80011b8:	200000a8 	.word	0x200000a8

080011bc <__malloc_unlock>:
 80011bc:	4801      	ldr	r0, [pc, #4]	; (80011c4 <__malloc_unlock+0x8>)
 80011be:	f7ff be08 	b.w	8000dd2 <__retarget_lock_release_recursive>
 80011c2:	bf00      	nop
 80011c4:	200000a8 	.word	0x200000a8

080011c8 <_read_r>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	4d07      	ldr	r5, [pc, #28]	; (80011e8 <_read_r+0x20>)
 80011cc:	4604      	mov	r4, r0
 80011ce:	4608      	mov	r0, r1
 80011d0:	4611      	mov	r1, r2
 80011d2:	2200      	movs	r2, #0
 80011d4:	602a      	str	r2, [r5, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	f7ff fa14 	bl	8000604 <_read>
 80011dc:	1c43      	adds	r3, r0, #1
 80011de:	d102      	bne.n	80011e6 <_read_r+0x1e>
 80011e0:	682b      	ldr	r3, [r5, #0]
 80011e2:	b103      	cbz	r3, 80011e6 <_read_r+0x1e>
 80011e4:	6023      	str	r3, [r4, #0]
 80011e6:	bd38      	pop	{r3, r4, r5, pc}
 80011e8:	200000b4 	.word	0x200000b4

080011ec <_init>:
 80011ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ee:	bf00      	nop
 80011f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011f2:	bc08      	pop	{r3}
 80011f4:	469e      	mov	lr, r3
 80011f6:	4770      	bx	lr

080011f8 <_fini>:
 80011f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011fa:	bf00      	nop
 80011fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011fe:	bc08      	pop	{r3}
 8001200:	469e      	mov	lr, r3
 8001202:	4770      	bx	lr
